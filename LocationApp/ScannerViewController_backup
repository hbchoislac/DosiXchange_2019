
//
//  Barcode.swift
//  LocationApp
//
//  Created by Ford, Ryan M. on 11/23/18.
//  Copyright Â© 2018 Ford, Ryan M. All rights reserved.
//

import AVFoundation
import UIKit
import CloudKit




var recordsupdate = recordsUpdate()
var queryOutput = Queries()

class ScannerViewController: UIViewController, AVCaptureMetadataOutputObjectsDelegate {
var captureSession: AVCaptureSession!
var previewLayer: AVCaptureVideoPreviewLayer!
var topLayer: UIViewController!
var commitPredicate = NSPredicate()
var dosiLocation:String = ""
var description1:String = ""
var counter:Int64 = 0
var foundCounter:Int64 = 0
var beepSound: AVAudioPlayer?
var picture:String = ""
var message:String = ""
var imageView = UIImageView()
var foundItem:String = ""
var p2 = NSPredicate()
//var codeType:String = ""


@IBOutlet weak var innerView: UIView!

struct variables {

static var dosiNumber:String? = ""
static var QRCode:String? = ""
static var codeType:String? = ""

}

override func viewDidLoad() {
super.viewDidLoad()

view.backgroundColor = UIColor.white
captureSession = AVCaptureSession()

guard let videoCaptureDevice = AVCaptureDevice.default(for: .video) else { return }
let videoInput: AVCaptureDeviceInput

do {
videoInput = try AVCaptureDeviceInput(device: videoCaptureDevice)
}

catch {
return
}

if (captureSession.canAddInput(videoInput)) {
captureSession.addInput(videoInput)
}

else {
failed()
return
}

let metadataOutput = AVCaptureMetadataOutput()


if (captureSession.canAddOutput(metadataOutput)) {
captureSession.addOutput(metadataOutput)

metadataOutput.setMetadataObjectsDelegate(self, queue: DispatchQueue.main)
//Location barcode is a QR Code (.qr)
//Dosimeter barcoce is a CODE 128 barcode (.code128)
metadataOutput.metadataObjectTypes = [AVMetadataObject.ObjectType.qr, AVMetadataObject.ObjectType.code128]
}

else {

failed()
return
}

previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)

//self.previewLayer.frame = view.layer.bounds
//previewLayer.frame = view.layer.bounds  //use this instead of next line to fill the screen
//previewLayer.frame = CGRect(x: 20, y: 150, width: 275, height: 200) //set frame size of camera window

self.previewLayer.frame.size = self.innerView.frame.size
previewLayer.videoGravity = .resizeAspectFill
self.innerView.layer.addSublayer(previewLayer)
captureSession.startRunning()

}

func failed() {
let ac = UIAlertController(title: "Scanning not supported", message: "Your device does not support scanning a code from an item. Please use a device with a camera.", preferredStyle: .alert)
ac.addAction(UIAlertAction(title: "OK", style: .default))
present(ac, animated: true)
captureSession = nil
}

override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
self.previewLayer.frame.size = self.innerView.frame.size
if (captureSession?.isRunning == false) {
captureSession.startRunning()
}
}

override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)

if (captureSession?.isRunning == true) {
captureSession.stopRunning()
}
}

func metadataOutput(_ output: AVCaptureMetadataOutput, didOutput metadataObjects: [AVMetadataObject], from connection: AVCaptureConnection) {
captureSession.stopRunning()

if let metadataObject = metadataObjects.first {
guard let readableObject = metadataObject as? AVMetadataMachineReadableCodeObject else { return }
guard let stringValue = readableObject.stringValue else { return }

switch readableObject.type {

case .qr:
//print(readableObject.type)
//print("Found QRCode")
variables.codeType = "QRCode"

case .code128:
//print(readableObject.type)
//print("Found Code 128")
variables.codeType = "Code128"

default:
print("Code not found")

}

//AudioServicesPlaySystemSound(SystemSoundID(kSystemSoundID_Vibrate))
//AudioServicesPlaySystemSound(SystemSoundID())
found(code: stringValue)
}

//dismiss(animated: true)
}




func found(code: String) {
//pass dosiNumber to the self class so we can use it elsewhere.
//beep()
//variables.dosiNumber = code
//captureSession.stopRunning()
//alertPrompt()
//alert()

print("Debugging 1: \(self.foundCounter), \(String(describing: variables.codeType!)), \(String(describing: variables.dosiNumber as Any)), \(String(describing: variables.QRCode as Any))")

switch self.foundCounter {
case 0:
print("Debugging 2: \(self.foundCounter), \(String(describing: variables.codeType!)), \(String(describing: variables.dosiNumber as Any)), \(String(describing: variables.QRCode as Any))")
if variables.codeType == "QRCode" {  //indicates first scan
beep()
variables.QRCode = code
//self.foundCounter += 1
variables.dosiNumber = nil //clear
alertPrompt()
} //end if
else if variables.codeType == "Code128" {
beep()
variables.dosiNumber = code
//self.foundCounter += 1
variables.QRCode = nil //clear
alertPrompt()
} //end else if

case 1:
print("Debugging 2.5: \(self.foundCounter), \(String(describing: variables.codeType!)), \(String(describing: variables.dosiNumber as Any)), \(String(describing: variables.QRCode as Any))")
if variables.codeType == "Code128" {
if variables.dosiNumber == nil {
variables.dosiNumber = code
alertPrompt()
}//end if
else {
variables.QRCode = code
alertPrompt()
} //end else

} //end if

else if variables.codeType == "QRCode" {

if variables.QRCode == nil {
variables.QRCode = code
alertPrompt()
}//end if

else {
variables.dosiNumber = code
alertPrompt()
}//end else

} //end else if

default:
print("Invalid code")

} //end switch

print("Debugging 3: \(self.foundCounter), \(String(describing: variables.codeType!)), \(String(describing: variables.dosiNumber as Any)), \(String(describing: variables.QRCode as Any))")

} //end func

override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
return .portrait
}

func handler(alert: UIAlertAction!){  //used for OK in the alert prompt.

self.captureSession.startRunning()

}

func alertPrompt(){
//set up alert prompt
//contains requirements "logic"

if variables.dosiNumber == nil {
self.foundItem = variables.QRCode!
}
else {
self.foundItem = variables.dosiNumber!
}

let alertPrompt = UIAlertController(title: "Manage Dosimeter: \(self.foundItem)", message: nil, preferredStyle: .alert)
let cancel = UIAlertAction(title: "Cancel", style: .cancel, handler: handler)
let ExchangeDosimeter = UIAlertAction(title: "Exchange Dosimeter", style: .default) { (_) in
recordsupdate.exchangeDosi(dosiNumber: variables.dosiNumber!)
self.captureSession.startRunning()
}  //end let
let deployDosimeter = UIAlertAction(title: "Deploy Dosimeter", style: .default) { (_) in
self.captureSession.startRunning()
self.foundCounter = 1
print("Debugging 4: \(self.foundCounter), \(String(describing: variables.codeType!)), \(String(describing: variables.dosiNumber as Any)), \(String(describing: variables.QRCode as Any))")
self.alert()
}  //end let
let finishDeployment = UIAlertAction(title: "Deploy Dosimeter", style: .default) { (_) in
recordsupdate.deployDosi(dosiLocation: (alertPrompt.textFields?.first?.text)!, dosiNumber: variables.dosiNumber!, QRCode: variables.QRCode!)
self.captureSession.startRunning()
self.foundCounter = 0
//self.alert()
}  //end let
let collectDosimeter = UIAlertAction(title: "Collect Dosimeter", style: .default) { (_) in
recordsupdate.collectDosi(dosiNumber: variables.dosiNumber, QRCode: variables.QRCode)
self.captureSession.startRunning()
}  //end let
let flag = 0
let p1 = NSPredicate(format: "collectedFlag == %d", flag)
if variables.dosiNumber == nil {
self.p2 = NSPredicate(format: "QRCode == %@", variables.QRCode!)
}
else {
self.p2 = NSPredicate(format: "dosinumber == %@", variables.dosiNumber!)
}
let predicate = NSCompoundPredicate(andPredicateWithSubpredicates: [p1, self.p2])
let query = CKQuery(recordType: "Location", predicate: predicate)
database.perform(query, inZoneWith: nil) { (records, _) in
guard let records = records else { return }
if records.isEmpty {  //dosimeter not found

alertPrompt.addTextField { (textfield) in

let counter = self.counter
switch counter {

//Dosimeter not in database
//previous scan was an exchange, location info sent to self.description1
//self.description1 is reused into the text field
case 0:

textfield.text = self.description1  //reuse of the location data only occurs once.
self.counter += 1

//A dosimeter has to be scanned after an exchange scan
//dosimeter is not in database
//self.counter is 1 from the prior case
//means this has to be a fresh deployment, so we want an empty text field
case 1:

textfield.placeholder = "Describe this Location" //greyed out text since first deployment
self.counter = 0

default:

self.counter = 0

} //end Switch

} //end addTextField

if self.foundCounter == 0 {
DispatchQueue.main.async {  //UIAlerts need to be shown on the main thread.

alertPrompt.addAction(deployDosimeter)
alertPrompt.addAction(cancel)
}
}
else {
DispatchQueue.main.async {  //UIAlerts need to be shown on the main thread.
alertPrompt.addAction(finishDeployment)
alertPrompt.addAction(cancel)
}
}

} //end isEmpty

else { //dosimeter was found

for entry in records {
let description = entry["locdescription"] as? String
self.description1 = description!  //fetch the description info and feed it to self.description1
}
DispatchQueue.main.async {  //UIAlerts need to be shown on the main thread.

alertPrompt.addTextField { (textfield) in
textfield.text = self.description1  //assign self.description with the textfield information
}
alertPrompt.addAction(ExchangeDosimeter)
alertPrompt.addAction(collectDosimeter)
alertPrompt.addAction(cancel)
}

} //end else

DispatchQueue.main.async {   //UIAlerts need to be shown on the main thread.

self.present(alertPrompt, animated: true, completion: nil)

}   //end dispatch queue

}   //end perform query

}   // end alert prompt

func alert() {

//let imageView = UIImageView(frame: CGRect(x: 75, y: 90, width: 120, height: 80))
switch variables.codeType {

case "QRCode":
self.picture = Bundle.main.path(forResource: "Inlight", ofType: "jpg")!
self.message = "Location code accepted.  Please scan a dosimeter.\n\n\n\n\n\n\n"
self.imageView = UIImageView(frame: CGRect(x: 75, y: 90, width: 120, height: 80))
case "Code128":
self.picture = Bundle.main.path(forResource: "QRCodeImage", ofType: "png")!
self.message = "Dosimeter code accepted.  Please scan a location code.\n\n\n\n\n\n\n"
self.imageView = UIImageView(frame: CGRect(x: 90, y: 90, width: 100, height: 100))
default:
print("Bad Scan")

}

let image = UIImage(named: self.picture)
self.imageView.image = image

//set up alert

let alert = UIAlertController.init(title: "Scan Accepted", message: self.message, preferredStyle: .alert)
let OK = UIAlertAction(title: "OK", style: .default, handler: handler)

alert.view.addSubview(self.imageView)
alert.addAction(OK)
DispatchQueue.main.async {
self.present(alert, animated: true, completion: nil)
}

}


@objc func beep() {


//"Beep!"
guard let path = Bundle.main.path(forResource: "scannerbeep", ofType: "mp3") else {
print("URL Not Found")
return

}
let url = URL(fileURLWithPath: path)

do {
self.beepSound = try AVAudioPlayer(contentsOf: url)
self.beepSound?.play()
} catch {
print(error.localizedDescription)
}

}

@objc func beepFail() {


//"Beep!"
guard let path = Bundle.main.path(forResource: "beep-5", ofType: "wav") else {
print("URL Not Found")
return

}
let url = URL(fileURLWithPath: path)

do {
self.beepSound = try AVAudioPlayer(contentsOf: url)
self.beepSound?.play()
} catch {
print(error.localizedDescription)
}

}

}   //end class







