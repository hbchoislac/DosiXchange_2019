
//
//  classRecordsUpdate.swift
//  LocationApp
//
//  Created by Ford, Ryan M. on 11/30/18.
//  Copyright Â© 2018 Ford, Ryan M. All rights reserved.
//

import Foundation
import CloudKit
import UIKit
import CoreLocation

//Initialize other classes

let database = CKContainer.default().publicCloudDatabase
let svController = ScannerViewController()

class recordsUpdate: UIViewController {

//variables used to populate the database record

var locationInfo:String = ""
var locationManager = CLLocationManager()
var data = [CKRecord]()
var dosiNumber = ScannerViewController.variables.dosiNumber
var QRCode = ScannerViewController.variables.QRCode
var codeType = ScannerViewController.variables.codeType
var flag:Int64 = 1
var predicate = NSPredicate()

func handler(alert: UIAlertAction!){  //used for cancel in the alert prompt.

svController.captureSession.startRunning()

}

func deployDosi(dosiLocation:String, dosiNumber:String, QRCode:String) {
//fresh deployment because not in database
//Deploy = fetch parameters and save the record
locationManager.requestAlwaysAuthorization()
var currentLocation = CLLocation()
if( CLLocationManager.authorizationStatus() == .authorizedWhenInUse ||
CLLocationManager.authorizationStatus() ==  .authorizedAlways){

currentLocation = locationManager.location!

}  //end if

let latitude = String(format: "%.8f", currentLocation.coordinate.latitude)
let longitude = String(format: "%.8f", currentLocation.coordinate.longitude)
let cycle = generateCycleDate()


//add QRCode
saveRecord(latitude: latitude, longitude: longitude, dosiNumber: dosiNumber, text: dosiLocation, flag: 0, cycle: cycle, QRCode: QRCode)


}  //end function deployDosi



func exchangeDosi(dosiNumber:String){
//changes collectedFlag to one, to indicate the dosimeter is no longer among the active population
//also when flag is 1, does not show on map.
//Exchange = Collect + Deploy
updateAsCollected(flag: 1, dosiNumber: self.dosiNumber, QRCode: self.QRCode) //TODO:  Look at why dosiNumber is not optional

}  //end exchangeDosi

func collectDosi(dosiNumber:String?, QRCode:String?){

//collectDosi does the same thing as exchange dosi; however, exchange dosi
//code is more readable with separate functions, and app is more user friendly with separate buttons
//Collect = Collect (only)
updateAsCollected(flag: 1, dosiNumber: self.dosiNumber, QRCode: self.QRCode)

}  //end collectDosi

func updateAsCollected(flag:Int64, dosiNumber:String?, QRCode:String?){

//establish the predicate based on the type of barcode
print("Code Type from svcontroller: \(String(describing: self.codeType!))")
if self.codeType == "QRCode" {
self.predicate = NSPredicate(format: "QRCode = %@", QRCode!)
//print("Passing QRCode to query")
}

else if self.codeType == "Code128" {
self.predicate = NSPredicate(format: "dosinumber = %@", dosiNumber!)
//print("Passing Code 128 to query")
}
print("Predicate: \(self.predicate)")
print("Debugging 5: \(String(describing: dosiNumber)), \(String(describing: QRCode)), Flag: \(flag)")
let query = CKQuery(recordType: "Location", predicate: self.predicate)
database.perform(query, inZoneWith: nil) { (records, _) in
guard let records = records else { return }

for record in records {
//save the new flag only
record.setValue(flag, forKey: "collectedFlag")
let locationinfo = record["locdescription"] as? String
self.locationInfo = locationinfo!
database.save(record) { (record, error) in
guard record != nil else { return }

}  //end database save
//print(record)
}  //end for loop

}  //end perform query

}  //end updateAsCollected

func saveRecord(latitude:String, longitude:String, dosiNumber:String, text:String, flag:Int64, cycle:String, QRCode:String){
//use the properties of the class and save into the database.
//save data to database
//need a second saveRecord method to save the QR Code.
let newRecord = CKRecord(recordType: "Location")
newRecord.setValue(latitude, forKey: "latitude")
newRecord.setValue(longitude, forKey: "longitude")
newRecord.setValue(text, forKey: "locdescription")
newRecord.setValue(dosiNumber, forKey: "dosinumber")
newRecord.setValue(flag, forKey: "collectedFlag")
newRecord.setValue(cycle, forKey: "cycleDate")
newRecord.setValue(QRCode, forKey: "QRCode")
//print(ScannerViewController.variables.dosiNumber)
database.save(newRecord) { (record, error) in
guard record != nil else { return }

}  //end database save

}  //end saveRecord

func alertComplete(){

//TODO: - Need to use this
//Put a variable into the title based on what's calling it.

let scanAlertComplete = UIAlertController(title: "Records Have Been Updated", message: nil, preferredStyle: .alert)
let OK = UIAlertAction(title: "OK", style: .default, handler: nil)

DispatchQueue.main.async {  //UI alerts go into the main thread

scanAlertComplete.addAction(OK)
svController.present(scanAlertComplete, animated: true, completion: nil)

} //end dispatch queue

} //end alertComplete

func searchByDosi(dosiNumber:String?) {
//TODO:  Need to use this
// Revise it to look for either the dosi or the QR Code.

let predicate = NSPredicate(format: "dosinumber = %@", self.dosiNumber!)
//query to fetch the location description to populate the field for the new dosimeter
let query = CKQuery(recordType: "Location", predicate: predicate)
database.perform(query, inZoneWith: nil) { (records, _) in
guard let records = records else { return }
self.data = records
let sortedRecords = records.sorted(by: { $0.creationDate! > $1.creationDate! })
self.data = sortedRecords
for entry in records {

let description = entry["locdescription"] as? String
self.locationInfo = description!
//print("Info about this dosimeter: \(description!)")

}  //end for loop

}  //end perform query

} //end function searchByDosi

func generateCycleDate() -> String {

//return the dosimeter wear date for the CKRecord as a string (date format not necessary - will be converted in excel)
//The wear date is important for post processing the CSV file
//And for color coding the map pins.
//There are two cycles per year:  one is January 1 wear date, the other is July 1 wear date
//(The dosimeters aren't always deployed in January and June)

let currentDate = Date()

let dateFormatterMonth = DateFormatter()
dateFormatterMonth.dateFormat = "MMMM"
let dateStringMonth = dateFormatterMonth.string(from: currentDate)

let dateFormatterYear = DateFormatter()
dateFormatterYear.dateFormat = "yyyy"
let dateStringYear = dateFormatterYear.string(from: currentDate)

switch dateStringMonth {

case "January":
return "1-1-\(dateStringYear)"
case "February":
return "1-1-\(dateStringYear)"
case "March":
return "1-1-\(dateStringYear)"
case "April":
return "1-1-\(dateStringYear)"
case "May":
return "1-1-\(dateStringYear)"
case "June":
return "1-1-\(dateStringYear)"
case "July":
return "7-1-\(dateStringYear)"
case "August":
return "7-1-\(dateStringYear)"
case "September":
return "7-1-\(dateStringYear)"
case "October":
return "7-1-\(dateStringYear)"
case "November":
return "7-1-\(dateStringYear)"
case "December":
return "7-1-\(dateStringYear)"
default:
return "Cycle Date Error"

} //end switch

} //end generateCycleDate

func generatePriorCycleDate(cycleDate: String) -> String {
let year = Int64(cycleDate.suffix(4))
let lastYear:Int64 = year! - 1
switch cycleDate.first {


case "1":                 //7 and subtract 1 from year

return "7-1-\(String(describing: lastYear))"

case "7":                 //1 and same year

return "1-1-\(String(describing: year))"

default:

return "Prior Cycle Date Error"

}

}

} // end class
